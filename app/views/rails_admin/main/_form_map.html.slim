scss:
  /* Always set the map height explicitly to define the size of the div
   * element that contains the map. */
  #map {
    //height: 100%;
    height: 500px;
  }

  /* Optional: Makes the sample page fill the window. */
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  #description {
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
  }

  #infowindow-content .title {
    font-weight: bold;
  }

  #infowindow-content {
    display: none;
  }

  #map #infowindow-content {
    display: inline;
  }

  .pac-card {
    margin: 10px 10px 0 0;
    border-radius: 2px 0 0 2px;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    background-color: #fff;
    font-family: Roboto;
  }

  #pac-container {
    padding-bottom: 12px;
    margin-right: 12px;
  }

  .pac-controls {
    display: inline-block;
    padding: 5px 11px;
  }

  .pac-controls label {
    font-family: Roboto;
    font-size: 13px;
    font-weight: 300;
  }

  #pac-input {
    background-color: #fff;
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 400px;
  }

  #pac-input:focus {
    border-color: #4d90fe;
  }

  #title {
    color: #fff;
    background-color: #4d90fe;
    font-size: 25px;
    font-weight: 500;
    padding: 6px 12px;
  }



#map-hidden-fields
  input id="about_map_marker_lat_lng" type="hidden" value=@object.try(:lat_lng) name="about_map_marker[lat_lng]"
#pac-card.pac-card
  div
    #title
      | Autocomplete search
    #type-selector.pac-controls
      input#changetype-all checked="checked" name="type" type="radio"
      label for="changetype-all"
        |All
      input#changetype-establishment name="type" type="radio"
      label for="changetype-establishment"
        |Establishments
      input#changetype-address name="type" type="radio"
      label for="changetype-address"
        |Addresses
      input#changetype-geocode name="type" type="radio"
      label for="changetype-geocode"
        |Geocodes
    #strict-bounds-selector.pac-controls
      input#use-strict-bounds type="checkbox" value=""
      label for="use-strict-bounds"
        |Strict Bounds
  #pac-container
    input#pac-input placeholder="Enter a location" value=@object.google_address type="text" name="about_map_marker[google_address]"
#map
#infowindow-content
  img#place-icon height="16" src="" width="16" 
  span#place-name.title
  br
  span#place-address


javascript:
  function initMap() {
    var current_lat_lng = {lat: -33.8688, lng: 151.2195}
    var lat_lng_str = $("#map-hidden-fields input").val()
    if (lat_lng_str && lat_lng_str.length){
      var lat_lng_arr = lat_lng_str.split(",")
      current_lat_lng = {lat: parseInt(lat_lng_arr[0]), lng: parseInt(lat_lng_arr[1])}

    }

    var map = new google.maps.Map(document.getElementById('map'), {
      center: current_lat_lng,
      zoom: 13
    });
    var card = document.getElementById('pac-card');
    var input = document.getElementById('pac-input');
    var types = document.getElementById('type-selector');
    var strictBounds = document.getElementById('strict-bounds-selector');

    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
    $(input).on("keyup keydown keypress", function(e){

      //console.log("e.which: ", e.which)
      if (e.which == 13){
        e.preventDefault()
      }

    })

    var autocomplete = new google.maps.places.Autocomplete(input);

    // Bind the map's bounds (viewport) property to the autocomplete object,
    // so that the autocomplete requests use the current map bounds for the
    // bounds option in the request.
    autocomplete.bindTo('bounds', map);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    var set_marker = function (lat_lng, place) {
      infowindow.close();
      marker.setVisible(false);
      if (!place){
        place = autocomplete.getPlace();
      }

      if (!place){
        var google_address_str = $("#pac-input").val()
        if (!google_address_str || !google_address_str.length){
          return
        }
        var request = {
          query: google_address_str
        };

        var service = new google.maps.places.PlacesService(map);
        service.textSearch(request, get_place_callback);

        function get_place_callback(results, status) {
          if (status == google.maps.places.PlacesServiceStatus.OK) {
            //grab the first item, Orlando, Florida, USA
            var place = results[0];
            set_marker(null, place)
          }
        }
        return
      }
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and
        // pressed the Enter key, or the Place Details request failed.
        window.alert("No details available for input: '" + place.name + "'");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17);  // Why 17? Because it looks good.
      }
      var location_str = '' + place.geometry.location.lat() + "," + place.geometry.location.lng()
      console.log("place.geometry.location: ", location_str)
      var address_str = $("#pac-input").val()
      $("#map-hidden-fields input").val(location_str)
      //$("#map-hidden-fields input").val(address_str)

      marker.setPosition(place.geometry.location);
      marker.setVisible(true);

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      infowindowContent.children['place-icon'].src = place.icon;
      infowindowContent.children['place-name'].textContent = place.name;
      infowindowContent.children['place-address'].textContent = address;
      infowindow.open(map, marker);
    }

    autocomplete.addListener('place_changed', set_marker);


    // Sets a listener on a radio button to change the filter type on Places
    // Autocomplete.
    function setupClickListener(id, types) {
      var radioButton = document.getElementById(id);
      radioButton.addEventListener('click', function () {
        autocomplete.setTypes(types);
      });
    }

    setupClickListener('changetype-all', []);
    setupClickListener('changetype-address', ['address']);
    setupClickListener('changetype-establishment', ['establishment']);
    setupClickListener('changetype-geocode', ['geocode']);

    document.getElementById('use-strict-bounds')
            .addEventListener('click', function () {
              console.log('Checkbox clicked! New state=' + this.checked);
              autocomplete.setOptions({strictBounds: this.checked});
            });

    //autocomplete.fireEvent("place_changed")
    set_marker()
  }

script async="" defer="" src="https://maps.googleapis.com/maps/api/js?key=#{ENV["GOOGLE_MAPS_API_KEY"]}&libraries=places&callback=initMap"